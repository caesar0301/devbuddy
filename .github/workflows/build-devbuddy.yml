name: Build DevBuddy Images

on:
  push:
    branches:
      - main
    paths:
      - 'images/**'
      - '.github/workflows/build-devbuddy.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

jobs:
  validate-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Validate image config
        run: |
          # Check if config file exists
          if [ ! -f images/image-config.yaml ]; then
            echo "Error: image-config.yaml not found"
            exit 1
          fi

          # Validate YAML syntax
          if ! yq e '.' images/image-config.yaml > /dev/null; then
            echo "Error: Invalid YAML syntax in image-config.yaml"
            exit 1
          fi

          # Validate required fields
          for img in $(yq e '.images | keys | .[]' images/image-config.yaml); do
            required_fields=("base" "platforms" "context" "tag" "version" "dockerfile")
            for field in "${required_fields[@]}"; do
              if ! yq e ".images.$img.$field" images/image-config.yaml > /dev/null; then
                echo "Error: Missing required field '$field' for image '$img'"
                exit 1
              fi
            done
          done

          # Validate registry config
          if ! yq e '.registry.url' images/image-config.yaml > /dev/null || ! yq e '.registry.namespace' images/image-config.yaml > /dev/null; then
            echo "Error: Missing required registry configuration"
            exit 1
          fi

  filter-changes:
    needs: validate-config
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for change detection

      - name: Set matrix output
        id: set-matrix
        run: |
          # Read image config
          IMAGES=$(cat images/image-config.yaml | yq e '.images | keys | .[]' -)
          echo "::group::Available Images"
          echo "$IMAGES"
          echo "::endgroup::"
          
          # Create matrix for changed images
          MATRIX="["
          HAS_CHANGES="false"
          
          # Check if this is a manual trigger with force rebuild
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "::notice::Force rebuild requested, marking all images for rebuild"
            for img in $IMAGES; do
              MATRIX="$MATRIX{\"name\":\"$img\"},"
            done
            HAS_CHANGES="true"
          else
            # Check if config file changed
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "images/image-config.yaml"; then
              echo "::notice::Config file changed, marking all images as changed"
              for img in $IMAGES; do
                MATRIX="$MATRIX{\"name\":\"$img\"},"
              done
              HAS_CHANGES="true"
            else
              # Check individual image directories
              for img in $IMAGES; do
                if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "images/$img/"; then
                  echo "::notice::Changes detected in $img"
                  MATRIX="$MATRIX{\"name\":\"$img\"},"
                  HAS_CHANGES="true"
                fi
              done
            fi
          fi
          
          # Only add matrix if there are changes
          if [ "$HAS_CHANGES" = "true" ]; then
            MATRIX="${MATRIX%,}]"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
          fi
          
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          
          echo "::group::Matrix Output"
          echo "Matrix: $MATRIX"
          echo "Has changes: $HAS_CHANGES"
          echo "::endgroup::"

  build-and-push:
    needs: filter-changes
    if: needs.filter-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.filter-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Aliyuncs Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ fromJSON(steps.get-config.outputs.config).registry.url }}
          username: ${{ secrets.ALIYUNCS_USERNAME }}
          password: ${{ secrets.ALIYUNCS_TOKEN }}

      - name: Get image config
        id: get-config
        run: |
          CONFIG=$(cat images/image-config.yaml | yq e -o=json -)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

      - name: Create Dockerfile
        run: |
          DOCKERFILE_PATH="${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].context }}/Dockerfile"
          echo "${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].dockerfile }}" > "$DOCKERFILE_PATH"
          
          # Verify Dockerfile was created
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "::error::Failed to create Dockerfile at $DOCKERFILE_PATH"
            exit 1
          fi

      - name: Build and push ${{ matrix.component.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].context }}
          file: ${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].context }}/Dockerfile
          push: true
          platforms: ${{ join(fromJSON(steps.get-config.outputs.config).images[matrix.component.name].platforms, ',') }}
          cache-from: type=gha,scope=${{ matrix.component.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component.name }}
          tags: |
            ${{ fromJSON(steps.get-config.outputs.config).registry.url }}/${{ fromJSON(steps.get-config.outputs.config).registry.namespace }}/${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].tag }}:${{ fromJSON(steps.get-config.outputs.config).images[matrix.component.name].version }}
