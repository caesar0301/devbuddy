name: Add New Image

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Image name (e.g., myapp, redis-custom)'
        required: true
        type: string
      base_image:
        description: 'Base Docker image (e.g., alpine:3.21, ubuntu:24.04)'
        required: true
        type: string
      platforms:
        description: 'Target platforms (comma-separated, e.g., linux/amd64,linux/arm64)'
        required: true
        type: string
        default: 'linux/amd64,linux/arm64'
      tag:
        description: 'Image tag for registry (e.g., myapp, redis-custom)'
        required: true
        type: string
      version:
        description: 'Image version (e.g., latest, 1.0.0, v2.1.0)'
        required: true
        type: string
        default: 'latest'
      dockerfile_content:
        description: 'Dockerfile content (optional, will use FROM base_image if empty)'
        required: false
        type: string
        default: ''
      description:
        description: 'Brief description of the image'
        required: false
        type: string
        default: 'Custom Docker image'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.validate.outputs.image_name }}
      base_image: ${{ steps.validate.outputs.base_image }}
      platforms: ${{ steps.validate.outputs.platforms }}
      tag: ${{ steps.validate.outputs.tag }}
      version: ${{ steps.validate.outputs.version }}
      dockerfile_content: ${{ steps.validate.outputs.dockerfile_content }}
      description: ${{ steps.validate.outputs.description }}
    steps:
      - name: Validate inputs
        id: validate
        run: |
          # Validate image name (alphanumeric, hyphens, underscores only)
          IMAGE_NAME="${{ github.event.inputs.image_name }}"
          if [[ ! "$IMAGE_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: Image name must contain only alphanumeric characters, hyphens, and underscores"
            exit 1
          fi
          
          # Check if image directory already exists
          if [ -d "images/$IMAGE_NAME" ]; then
            echo "Error: Image directory 'images/$IMAGE_NAME' already exists"
            exit 1
          fi
          
          # Validate platforms format
          PLATFORMS="${{ github.event.inputs.platforms }}"
          if [[ ! "$PLATFORMS" =~ ^[a-zA-Z0-9/,-]+$ ]]; then
            echo "Error: Platforms must contain only alphanumeric characters, slashes, commas, and hyphens"
            exit 1
          fi
          
          # Set outputs
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "base_image=${{ github.event.inputs.base_image }}" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "dockerfile_content=${{ github.event.inputs.dockerfile_content }}" >> $GITHUB_OUTPUT
          echo "description=${{ github.event.inputs.description }}" >> $GITHUB_OUTPUT
          
          echo "Validation passed:"
          echo "  Image name: $IMAGE_NAME"
          echo "  Base image: ${{ github.event.inputs.base_image }}"
          echo "  Platforms: $PLATFORMS"
          echo "  Tag: ${{ github.event.inputs.tag }}"
          echo "  Version: ${{ github.event.inputs.version }}"

  create-image:
    needs: validate-inputs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image directory and files
        run: |
          IMAGE_NAME="${{ needs.validate-inputs.outputs.image_name }}"
          BASE_IMAGE="${{ needs.validate-inputs.outputs.base_image }}"
          PLATFORMS="${{ needs.validate-inputs.outputs.platforms }}"
          TAG="${{ needs.validate-inputs.outputs.tag }}"
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          DOCKERFILE_CONTENT="${{ needs.validate-inputs.outputs.dockerfile_content }}"
          DESCRIPTION="${{ needs.validate-inputs.outputs.description }}"
          
          # Create image directory
          mkdir -p "images/$IMAGE_NAME"
          
          # Create config.yaml
          # Prepare dockerfile content
          if [ -n "$DOCKERFILE_CONTENT" ]; then
            DOCKERFILE_LINES="$DOCKERFILE_CONTENT"
          else
            DOCKERFILE_LINES="FROM $BASE_IMAGE"
          fi
          
          # Create the config file
          {
            echo "platforms: [$PLATFORMS]"
            echo "context: images/$IMAGE_NAME"
            echo "tag: $TAG"
            echo "version: $VERSION"
            echo "dockerfile: |"
            echo "$DOCKERFILE_LINES" | sed 's/^/  /'
          } > "images/$IMAGE_NAME/config.yaml"
          
          # Create README.md
          cat > "images/$IMAGE_NAME/README.md" << EOF
          # $IMAGE_NAME
          
          $DESCRIPTION
          
          ## Configuration
          
          - **Base Image**: \`$BASE_IMAGE\`
          - **Tag**: \`$TAG\`
          - **Version**: \`$VERSION\`
          - **Platforms**: \`$PLATFORMS\`
          
          ## Usage
          
          \`\`\`bash
          docker pull registry.cn-hangzhou.aliyuncs.com/lacogito/$TAG:$VERSION
          \`\`\`
          EOF
          
          echo "Created image module: images/$IMAGE_NAME"

      - name: Validate created config
        run: |
          bash scripts/validate-image-configs.sh

      - name: Create commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "images/${{ needs.validate-inputs.outputs.image_name }}/"
          git commit -m "feat: add new image ${{ needs.validate-inputs.outputs.image_name }}

          - Base image: ${{ needs.validate-inputs.outputs.base_image }}
          - Tag: ${{ needs.validate-inputs.outputs.tag }}
          - Version: ${{ needs.validate-inputs.outputs.version }}
          - Platforms: ${{ github.event.inputs.platforms }}
          - Description: ${{ github.event.inputs.description }}"

      - name: Push changes
        run: |
          git push origin ${{ github.ref }}

      - name: Show summary
        run: |
          echo "## âœ… New image created successfully!"
          echo ""
          echo "**Image**: ${{ needs.validate-inputs.outputs.image_name }}"
          echo "**Tag**: ${{ needs.validate-inputs.outputs.tag }}"
          echo "**Version**: ${{ needs.validate-inputs.outputs.version }}"
          echo "**Platforms**: ${{ github.event.inputs.platforms }}"
          echo ""
          echo "The image will be built and pushed to the registry on the next push to main branch."
          echo ""
          echo "### Files created:"
          echo "- \`images/${{ needs.validate-inputs.outputs.image_name }}/config.yaml\`"
          echo "- \`images/${{ needs.validate-inputs.outputs.image_name }}/README.md\`" 